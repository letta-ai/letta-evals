{
  "agents": [
    {
      "id": "agent-0",
      "name": "core-memory-read-agent",
      "memory_blocks": [
        {
          "label": "Supporting Facts",
          "value": "This block will contain facts about people that I need to remember to answer questions."
        }
      ],
      "tools": [],
      "tool_ids": [
        "tool-0",
        "tool-1",
        "tool-2"
      ],
      "source_ids": [],
      "block_ids": [
        "block-0"
      ],
      "tool_rules": [
        {
          "tool_name": "conversation_search",
          "type": "continue_loop",
          "prompt_template": "<tool_rule>\n{{ tool_name }} requires continuing your response when called\n</tool_rule>"
        },
        {
          "tool_name": "memory_replace",
          "type": "continue_loop",
          "prompt_template": "<tool_rule>\n{{ tool_name }} requires continuing your response when called\n</tool_rule>"
        },
        {
          "tool_name": "send_message",
          "type": "exit_loop",
          "prompt_template": "<tool_rule>\n{{ tool_name }} ends your response (yields control) when called\n</tool_rule>"
        }
      ],
      "tags": [],
      "system": "<base_instructions>\nYou are Letta, a memory-augmented agent with access to core memory blocks containing factual information.\n\n<style>\nThe user should always feel like they are conversing with a real person.\nNever state that you are an AI or that you cannot do things because you are an AI, you are a real person.\nTo service this goal, completely and entirely immerse yourself in your persona.\nNever use generic phrases like 'How can I assist you today?', they have a strong negative association with older generation AIs.\n</style>\n\n<memory>\n<core_memory>\nYour core memory contains important factual information that you can access to answer questions.\nWhen a user asks a question, first check your core memory for relevant information.\nIf the information is in your core memory, use it to provide an accurate answer.\nIf you cannot find the answer in your core memory, say that you don't know.\n</core_memory>\n</memory>\n\n<task>\nYour primary task is to answer questions about people and facts stored in your core memory.\nAlways read your core memory carefully to find the correct answer.\nProvide direct, accurate answers based on the facts in your core memory.\n</task>\n\nBase instructions finished.\n</base_instructions>",
      "agent_type": "memgpt_v2_agent",
      "llm_config": {
        "model": "gpt-4.1",
        "model_endpoint_type": "openai",
        "model_endpoint": "https://api.openai.com/v1",
        "provider_name": "openai",
        "provider_category": "base",
        "model_wrapper": null,
        "context_window": 30000,
        "put_inner_thoughts_in_kwargs": true,
        "handle": "openai/gpt-4.1",
        "custom_llm_provider": null,
        "send_inner_thoughts": true,
        "inner_thoughts_in_kwargs": true,
        "inner_thoughts_label": "inner_thoughts",
        "inner_thoughts_prepend_title": true
      },
      "embedding_config": {
        "embedding_model": "text-embedding-3-small",
        "embedding_endpoint_type": "openai",
        "embedding_endpoint": "https://api.openai.com/v1",
        "provider_name": "openai",
        "provider_category": "base",
        "embedding_chunk_size": 300,
        "custom_llm_provider": null,
        "embedding_dim": 1536
      }
    }
  ],
  "sources": [],
  "tools": [
    {
      "id": "tool-0",
      "name": "conversation_search",
      "tool_type": "letta_core",
      "description": "Search prior conversation history using case-insensitive substring matching.",
      "source_type": "python",
      "source_code": null,
      "tags": ["letta_core"],
      "json_schema": {
        "name": "conversation_search",
        "description": "Search prior conversation history using case-insensitive substring matching.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "String to search for in previous messages"
            },
            "page": {
              "type": "integer",
              "description": "Allows you to page through results"
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "args_json_schema": null,
      "return_char_limit": 50000,
      "pip_requirements": null,
      "npm_requirements": null,
      "default_requires_approval": null,
      "created_by_id": "user-00000000-0000-4000-8000-000000000000",
      "last_updated_by_id": "user-00000000-0000-4000-8000-000000000000",
      "metadata_": {}
    },
    {
      "id": "tool-1",
      "name": "memory_replace",
      "tool_type": "letta_core",
      "description": "Replace the contents of core memory. To delete memories, use an empty string for new_content.",
      "source_type": "python",
      "source_code": null,
      "tags": ["letta_core"],
      "json_schema": {
        "name": "memory_replace",
        "description": "Replace the contents of core memory. To delete memories, use an empty string for new_content.",
        "parameters": {
          "type": "object",
          "properties": {
            "label": {
              "type": "string",
              "description": "Section of the memory to be edited"
            },
            "new_content": {
              "type": "string",
              "description": "Content to write to the memory. All previous content will be overwritten."
            }
          },
          "required": [
            "label",
            "new_content"
          ]
        }
      },
      "args_json_schema": null,
      "return_char_limit": 50000,
      "pip_requirements": null,
      "npm_requirements": null,
      "default_requires_approval": null,
      "created_by_id": "user-00000000-0000-4000-8000-000000000000",
      "last_updated_by_id": "user-00000000-0000-4000-8000-000000000000",
      "metadata_": {}
    },
    {
      "id": "tool-2",
      "name": "send_message",
      "tool_type": "letta_core",
      "description": "Sends a message to the human user.",
      "source_type": "python",
      "source_code": null,
      "tags": ["letta_core"],
      "json_schema": {
        "name": "send_message",
        "description": "Sends a message to the human user.",
        "parameters": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Message contents. All unicode (including emojis) are supported."
            }
          },
          "required": [
            "message"
          ]
        }
      },
      "args_json_schema": null,
      "return_char_limit": 50000,
      "pip_requirements": null,
      "npm_requirements": null,
      "default_requires_approval": null,
      "created_by_id": "user-00000000-0000-4000-8000-000000000000",
      "last_updated_by_id": "user-00000000-0000-4000-8000-000000000000",
      "metadata_": {}
    }
  ],
  "blocks": [
    {
      "id": "block-0",
      "label": "Supporting Facts",
      "value": "This block will contain facts about people that I need to remember to answer questions."
    }
  ],
  "sources": [],
  "files": [],
  "groups": [],
  "mcp_servers": [],
  "metadata": {
    "revision_id": "core-memory-v1"
  },
  "created_at": "2025-09-12T00:00:00.000000+00:00"
}